{"ast":null,"code":"const express = require(\"express\");\nconst collection = require(\"./mongo\");\nconst cors = require(\"cors\");\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\napp.use(cors());\napp.get(\"/login\", cors(), (req, res) => {});\napp.post(\"/login\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    const check = await collection.findOne({\n      email: email\n    });\n    if (check) {\n      res.json(\"exists\");\n    } else {\n      res.json(\"notexist\");\n    }\n  } catch (e) {\n    res.json(\"notexist\");\n  }\n});\napp.post(\"/signup\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  const data = {\n    email: email,\n    password: password\n  };\n  try {\n    const check = await collection.findOne({\n      email: email\n    });\n    if (check) {\n      res.json(\"exist\");\n    } else {\n      res.json(\"notexist\");\n      await collection.insertMany([data]);\n    }\n  } catch (e) {\n    res.json(\"notexist\");\n  }\n});\napp.listen(3000, () => {\n  console.log(\"port connected\");\n});","map":{"version":3,"names":["express","require","collection","cors","app","use","json","urlencoded","extended","get","req","res","post","email","password","body","check","findOne","e","data","insertMany","listen","console","log"],"sources":["D:/downloads/wise work/blogging_02/src/log.js"],"sourcesContent":["const express=require(\"express\")\r\nconst collection=require(\"./mongo\")\r\nconst cors=require(\"cors\")\r\nconst app=express()\r\napp.use(express.json())\r\napp.use(express.urlencoded({extended:true}))\r\napp.use(cors())\r\n\r\napp.get(\"/login\",cors(),(req,res)=>{\r\n\r\n\r\n})\r\n\r\napp.post(\"/login\",async(req,res)=>{\r\n    const{email,password}=req.body\r\n    try{\r\n        const check=await collection.findOne({email:email})\r\n\r\n        if(check){\r\n            res.json(\"exists\")\r\n        }\r\n        else{\r\n            res.json(\"notexist\")\r\n        }\r\n    }\r\n    catch(e){\r\n        res.json(\"notexist\")\r\n    }\r\n})\r\n\r\napp.post(\"/signup\",async(req,res)=>{\r\n    const{email,password}=req.body\r\n\r\n    const data={\r\n        email:email,\r\n        password:password\r\n    }\r\n    try{\r\n        const check=await collection.findOne({email:email})\r\n\r\n        if(check){\r\n            res.json(\"exist\")\r\n        }\r\n        else{\r\n            res.json(\"notexist\")\r\n            await collection.insertMany([data])\r\n        }\r\n    }\r\n    catch(e){\r\n        res.json(\"notexist\")\r\n    }\r\n})\r\n\r\napp.listen(3000,()=>{\r\n    console.log(\"port connected\");\r\n})"],"mappings":"AAAA,MAAMA,OAAO,GAACC,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMC,UAAU,GAACD,OAAO,CAAC,SAAS,CAAC;AACnC,MAAME,IAAI,GAACF,OAAO,CAAC,MAAM,CAAC;AAC1B,MAAMG,GAAG,GAACJ,OAAO,EAAE;AACnBI,GAAG,CAACC,GAAG,CAACL,OAAO,CAACM,IAAI,EAAE,CAAC;AACvBF,GAAG,CAACC,GAAG,CAACL,OAAO,CAACO,UAAU,CAAC;EAACC,QAAQ,EAAC;AAAI,CAAC,CAAC,CAAC;AAC5CJ,GAAG,CAACC,GAAG,CAACF,IAAI,EAAE,CAAC;AAEfC,GAAG,CAACK,GAAG,CAAC,QAAQ,EAACN,IAAI,EAAE,EAAC,CAACO,GAAG,EAACC,GAAG,KAAG,CAGnC,CAAC,CAAC;AAEFP,GAAG,CAACQ,IAAI,CAAC,QAAQ,EAAC,OAAMF,GAAG,EAACC,GAAG,KAAG;EAC9B,MAAK;IAACE,KAAK;IAACC;EAAQ,CAAC,GAACJ,GAAG,CAACK,IAAI;EAC9B,IAAG;IACC,MAAMC,KAAK,GAAC,MAAMd,UAAU,CAACe,OAAO,CAAC;MAACJ,KAAK,EAACA;IAAK,CAAC,CAAC;IAEnD,IAAGG,KAAK,EAAC;MACLL,GAAG,CAACL,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC,MACG;MACAK,GAAG,CAACL,IAAI,CAAC,UAAU,CAAC;IACxB;EACJ,CAAC,CACD,OAAMY,CAAC,EAAC;IACJP,GAAG,CAACL,IAAI,CAAC,UAAU,CAAC;EACxB;AACJ,CAAC,CAAC;AAEFF,GAAG,CAACQ,IAAI,CAAC,SAAS,EAAC,OAAMF,GAAG,EAACC,GAAG,KAAG;EAC/B,MAAK;IAACE,KAAK;IAACC;EAAQ,CAAC,GAACJ,GAAG,CAACK,IAAI;EAE9B,MAAMI,IAAI,GAAC;IACPN,KAAK,EAACA,KAAK;IACXC,QAAQ,EAACA;EACb,CAAC;EACD,IAAG;IACC,MAAME,KAAK,GAAC,MAAMd,UAAU,CAACe,OAAO,CAAC;MAACJ,KAAK,EAACA;IAAK,CAAC,CAAC;IAEnD,IAAGG,KAAK,EAAC;MACLL,GAAG,CAACL,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC,MACG;MACAK,GAAG,CAACL,IAAI,CAAC,UAAU,CAAC;MACpB,MAAMJ,UAAU,CAACkB,UAAU,CAAC,CAACD,IAAI,CAAC,CAAC;IACvC;EACJ,CAAC,CACD,OAAMD,CAAC,EAAC;IACJP,GAAG,CAACL,IAAI,CAAC,UAAU,CAAC;EACxB;AACJ,CAAC,CAAC;AAEFF,GAAG,CAACiB,MAAM,CAAC,IAAI,EAAC,MAAI;EAChBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;AACjC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}